package graph

import (
	"os"
)

var _ SourceNode = (*NamedPipeSource)(nil)
var _ SinkNode = (*NamedPipeSink)(nil)

type NamedPipeSource struct {
	*BaseSourceNode

	name string
	fd   *os.File
}

func (source *NamedPipeSource) Start() error {
	fd, err := os.OpenFile(source.name, os.O_RDONLY, os.ModeNamedPipe)
	if err != nil {
		return err
	}

	source.fd = fd

	return nil
}

func (source *NamedPipeSource) Stop() error {
	source.done(nil)
	return source.fd.Close()
}

func (source *NamedPipeSource) Read(p []byte) (int, error) {
	return source.fd.Read(p)
}

func NewNamedPipeSource(name string) *NamedPipeSource {
	return &NamedPipeSource{
		BaseSourceNode: NewBaseSourceNode(),
		name:           name,
	}
}

type NamedPipeSink struct {
	*BaseSinkNode

	name string
	fd   *os.File
}

func (sink *NamedPipeSink) Start() error {
	fd, err := os.OpenFile(sink.name, os.O_WRONLY, os.ModeNamedPipe)
	if err != nil {
		return err
	}

	sink.fd = fd

	return nil
}

func (sink *NamedPipeSink) Stop() error {
	return sink.fd.Close()
}

func (sink *NamedPipeSink) Write(p []byte) (int, error) {
	return sink.fd.Write(p)
}

func NewNamedPipeSink(name string) *NamedPipeSink {
	return &NamedPipeSink{
		BaseSinkNode: NewBaseSinkNode(),
		name:         name,
	}
}
